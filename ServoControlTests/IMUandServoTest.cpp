#include "RTIMULib.h"
#include "rpiPWM1.h"

int main()
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

    RTIMU *imu = RTIMU::createIMU(settings);
    

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("Canny find the IMU ya dafty.\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);

    //  set up for rate timer
    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();
    //  now just process data
    
    rpiPWM1 pwm(50.0, 256, 7.5, rpiPWM1::MSMODE);
    // initialize PWM1 output to 1KHz 8-bit resolution 80% Duty Cycle & PWM mode is MSMODE
    

    while (1) {
        //  poll at the rate recommended by the IMU
        usleep(imu->IMUGetPollInterval() * 1000);
        
        while (imu->IMURead()) {
            RTIMU_DATA imuData = imu->getIMUData();

            now = RTMath::currentUSecsSinceEpoch();

            while(now/0.02==0){
              RudderCommandDutyCycle = YawRateFeedbackGain*((3.14/10)*imuData.gyro.z() + 5);
              if (RudderCommandDutyCycle > 10) RudderDutyCycle = 10;
              if (RudderCommandDutyCycle <5) RudderDutyCycle = 5; 
              pwm.setDutyCycleCount(RudderCommandDutyCycle);
              now = RTMath::currentUSecsSinceEpoch();

              }
        }
    }
}
